/*
 * This file was generated by Sencha Architect version 3.2.0.
 * http://www.sencha.com/products/architect/
 *
 * This file requires use of the Ext JS 5.1.x library, under independent license.
 * License of Sencha Architect does not include license for Ext JS 5.1.x. For more
 * details see http://www.sencha.com/license or contact license@sencha.com.
 *
 * This file will be auto-generated each and everytime you save your project.
 *
 * Do NOT hand edit this file.
 */

Ext.define('Desktop.view.dashboard.ExecutiveDashboard', {
	extend: 'Ext.panel.Panel',
	alias: 'widget.executiveDashboard',

	requires: [
		'Desktop.view.dashboard.DashboardController',
		'Ext.tab.Panel',
		'Ext.tab.Tab',
		'Ext.grid.Panel',
		'Ext.grid.column.Boolean',
		'Ext.toolbar.Toolbar',
		'Ext.form.field.Text',
		'Ext.tree.Panel',
		'Ext.tree.View',
		'Ext.grid.filters.filter.Number',
		'Ext.grid.column.Date',
		'Ext.grid.filters.filter.Date',
		'Ext.grid.filters.filter.String',
		'Ext.grid.filters.filter.Boolean',
		'Ext.selection.CheckboxModel',
		'Ext.grid.filters.Filters',
		'Ext.grid.feature.Summary',
	],

	controller: 'dashboardController',

	viewModel: {
		type: 'executiveDashboard'
	},

	id: 'executiveDashboardMain',
	layout: 'fit',
	autoShow: true,
	maximized: true,
	minimizable: true,
	header: false,
	// autoScroll: true,
	modal: true,
	items: [{
		xtype: 'tabpanel',
		layout: 'fit',
		tabPosition: 'bottom',
		listeners: {
			tabchange: 'onDashboardTabChange'
		},
		items: [
			{
				xtype: 'panel',
				title: 'Total Overview',
				reference: 'loanTotalOverviewPanel',
				itemId: 'loanTotalOverviewPanel',
				id: 'loanTotalOverviewPanel',
				flex: 1,
				layout: 'fit',
				anchor: '100%',
				width: '100%',
				tabConfig: {
					xtype: 'tab',
					id: 'loanTotalOverviewPanelId',
					itemId: 'loanTotalOverviewPanelId'
				},
				items: [
					{
						xtype : 'fieldcontainer',
						layout : 'column',
						columnWidth : 1,
						items: [
							{
								xtype : 'fieldcontainer',
								margin: '10 0 0 10',
								columnWidth : .50,
								width : 650,
								items: [
									{
										xtype: 'cartesian',
										reference: 'chart',
										width: '100%',
										height: 500,
										legend: {
											type: 'sprite',
											docked: 'bottom'
										},
									    store: 'gYearlStatusStrategicDashboard',
								        title: 'Yearly Loan Creation Status',								           

										axes: [
											{
												type: 'numeric',
												fields: ['totalCreate','avgCreate'],
												position: 'left',
												grid: true,
												minimum: 0,
												renderer: 'onAxisLabelRender'
											}, 
											{
												type: 'category',
												fields: 'montYear',
												position: 'bottom',
												grid: true,
												label: {
													rotate: {
														degrees: 0
													}
												}
											}	
										],
										series: [
											{
												type: 'line',
												title: 'Total Creation',
												xField: 'montYear',
												yField: 'totalCreate',
												reference: 'totalCreateLine',
												itemId: 'totalCreateLine',
												id: 'totalCreateLine',
												colors: [
											        'rgb(101,39,37)'
											    ],
												marker: {
													type: 'square',
													animation: {
														duration: 200,
														easing: 'backOut'
													}
												},
												highlightCfg: {
													scaling: 2
												},
												tooltip: {
													trackMouse: true,
													renderer: 'onSeriesTooltipRender'
												}
											},
											{
												type: 'line',
												title: 'AVG Creation',
												xField: 'montYear',
												yField: 'avgCreate',
												reference: 'avgCreateLine',
												itemId: 'avgCreateLine',
												id: 'avgCreateLine',
												colors: [
											        'rgb(0,100,0)'
											    ],
												marker: {
													type: 'triangle',
													animation: {
														duration: 200,
														easing: 'backOut'
													}
												},
												highlightCfg: {
													scaling: 2
												},
												tooltip: {
													trackMouse: true,
													renderer: 'onSeriesTooltipRender'
												}
											}, 
										]
									}
								]
							},
							{
								xtype : 'fieldcontainer',
								columnWidth : .5,
								margin: '10 0 0 5',
								items: [
									{
										xtype: 'fieldcontainer',
										columnWidth: .25,
										layout: 'column',
										items: [{
											xtype: 'polar',
											reference: 'dashboardStatusPie',
											itemId: 'dashboardStatusPie',
											width: 400,
											height: 235,
											margin: '70 0 0 70',
											store: 'gDashboardStatusStore',
											plugins: {
												ptype: 'chartitemevents',
												moveEvents: true
											},
											insetPadding: 15,
											innerPadding: 5,
											showInLegend: true,
											legend: {
												docked: 'bottom',
												style: {
													font: '9px Helvetica'
												}
											},
											interactions: ['rotate', 'itemhighlight'],
											series: [{
												type: 'pie',
												angleField: 'value',
												showMarkers: false,
												showInLegend: true,
												donut: 0,
												highlight: true,
												label: {
													field: ['name'],
													display: 'rotate',
													contrast: true,
													font: '9px Helvetica',
													calloutLine: {
														length: 10,
														width: 1
													},
													hidden: true,
													renderer: function (value, label, storeItem) {
														return '';
													}
												},
												tooltip: {
													trackMouse: true,
													renderer: function (toolTip, storeItem, item) {
														toolTip.setHtml(storeItem.get('name') + ': ' + storeItem.get('value'));
													}
												}
											}]
										}]
									},
									{
										xtype: 'fieldcontainer',
										layout: 'column',
										columnWidth: .25,
										layout: 'column',
										height: 520,
										items: [{
												xtype: 'fieldcontainer',
												columnWidth: .5,
												style: 'background-color: #3090C7; border-radius: 16px;',
												border: true,
												margin: '70 0 0 170',
												items: [{
														xtype: 'displayfield',
														itemId: 'totalRequest',
														reference: 'totalRequest',
														labelWidth: 100,
														labelAlign: 'left',
														fieldLabel: 'Total Request',
														columnWidth: .5,
														margin: '15 40 0 40',
														value: ''
													},
													{
														xtype: 'displayfield',
														itemId: 'totalPending',
														reference: 'totalPending',
														labelWidth: 100,
														labelAlign: 'left',
														fieldLabel: 'Total Pending',
														columnWidth: .5,
														margin: '0 0 0 40',
														value: ''
													},
													{
														xtype: 'displayfield',
														itemId: 'totalCompleted',
														reference: 'totalCompleted',
														labelWidth: 100,
														labelAlign: 'left',
														fieldLabel: 'Total Completed',
														columnWidth: .5,
														margin: '0 0 10 40',
														value: ''
													},
													
												]
											}						
										]
									}
								]
							}
						]
					}
				]
			},
			{
				xtype: 'panel',
				title: 'Loan Tracker Dept Wise',
				reference: 'loanTrackerDeptWisePanel',
				itemId: 'loanTrackerDeptWisePanel',
				id: 'loanTrackerDeptWisePanel',
				tabConfig: {
					xtype: 'tab',
					id: 'lloanTrackerDeptWisePanelId',
					itemId: 'loanTrackerDeptWisePanelId'
				},
				dockedItems: [{
					xtype: 'panel',
					dock: 'top',
					itemId: 'SearchItemProperties',
					layout: 'column',
					collapseDirection: 'top',
					collapsed: false,
					collapsible: true,
					title: 'Search',
					dockedItems: [{
						xtype: 'toolbar',
						dock: 'bottom',
						shadow: true,
						itemId: 'SearchTollbar',
						layout: {
							type: 'hbox',
							align: 'middle',
							pack: 'center'
						},
						items: [{
								xtype: 'button',
								padding: 2,
								text: 'Search',
								reference: 'SearchBtn',
								listeners: {
									click: 'onClickLoanTrackerDeptWiseSearch'
								}
							},
							{
								xtype: 'button',
								padding: 3,
								text: 'Clear',
								listeners: {
									click: 'onClickSearchClear'
								}
							},
							'-',
							'-',
							{
								iconCls: 'icon-refresh', // optional icon class
								tooltip: 'Refresh',
								align: 'right',
								margin: '0 10 0 0',
								handler: 'refreshLoanTrackerDeptWise'
							},
						]
					}],
					items: [{
							xtype: 'textfield',
							itemId: 'loanTrackingId',
							reference: 'loanTrackingId',
							fieldLabel: 'Tracking Number',
							columnWidth: .28,
							labelAlign: 'right',
							labelWidth: 100,
							margin: '5 5 5 5',
						},
						{
							xtype: 'textfield',
							itemId: 'bpNoSrc',
							reference: 'bpNoSrc',
							fieldLabel: 'BP No',
							columnWidth: .23,
							labelAlign: 'right',
							labelWidth: 60,
							margin: '5 5 5 5',
						},
						{
							xtype: 'textfield',
							itemId: 'nid4Search',
							reference: 'nid4Search',
							fieldLabel: 'NID',
							columnWidth: .23,
							labelAlign: 'right',
							labelWidth: 50,
							margin: '5 5 5 5',
						},
						{
							xtype: 'textfield',
							itemId: 'account4Search',
							reference: 'account4Search',
							fieldLabel: 'Account No',
							columnWidth: .26,
							labelAlign: 'right',
							labelWidth: 95,
							margin: '5 5 5 5',
						},
						{
							xtype: 'textfield',
							itemId: 'customerName4Search',
							reference: 'customerName4Search',
							fieldLabel: 'Customer Name',
							columnWidth: .28,
							labelAlign: 'right',
							//left: '15px',
							labelWidth: 100,
							margin: '5 5 5 5',
						},
						{
							xtype: 'datefield',
							columnWidth: 0.23,
							reference: 'fromDate',
							itemId: 'fromDate',
							fieldLabel: 'From Date',
							labelAlign: 'right',
							emptyText: 'From Date',
							labelWidth: 60,
							margin: '5 5 5 5',
							format: 'd M Y',
						},
						{
							xtype: 'datefield',
							columnWidth: 0.23,
							itemId: 'toDate',
							reference: 'toDate',
							fieldLabel: 'To Date',
							labelAlign: 'right',
							emptyText: 'To Date',
							labelWidth: 50,
							margin: '5 5 5 5',
							format: 'd M Y',
						}
					]
				}],
				items: [{
					xtype: 'gridpanel',
					reference: 'loanTrackerDepetWise',
					itemId: 'loanTrackerDepetWise',
					columnWidth: 1.5,
					margin: '0 0 5 0',
					autoScroll: true,
					width: 1150,
					height: 420,
					layout: 'fit',
					header: false,
					border: true,
					title: false,
					filterable: true,
					closable: true,
					scrollable: true,
					border: false,
					store: 'gLoanTrackerDepartmentWise',
					viewConfig: {
						stripeRows: true,
						autoHeight: true,
						enableTextSelection: true,
						columnLines: true
					},

					features: [{
						id: 'group',
						ftype: 'summary',
						groupHeaderTpl: '{name}',
						hideGroupedHeader: true,
						enableGroupingMenu: false,
						showSummaryRow: true
					}],

					listeners: {
						scope: this,
						click: {
							element: 'body',
							delegate: '.x-grid-cell',
							fn: function (e, target, view) {

								var cmp = Ext.fly(target).up('#executiveDashboardMain').component;

								if (Ext.fly(target).up('tr').is('.x-grid-row-summary')) {

									var record = e.record;
									var deptName;
									var cellClickIndecate = "selectCell";
									var summaryClickIndecate = "summary";
									var undefined = false;
									var filterdata;
									var loanTrackingId = cmp.lookupReference('loanTrackingId').value;
									var bpNoSrc = cmp.lookupReference('bpNoSrc').value;
									var nid4Search = cmp.lookupReference('nid4Search').value;
									var account4Search = cmp.lookupReference('account4Search').value;
									var customerName4Search = cmp.lookupReference('customerName4Search').value;

									deptName = cmp.lookupReference('loanTrackerDepetWise').columns[target.cellIndex].text;

									if (deptName == '#' || deptName == 'Created On') return;
									if (loanTrackingId && !bpNoSrc && !nid4Search && !account4Search && !customerName4Search) filterdata = loanTrackingId;
									if (!loanTrackingId && bpNoSrc && !nid4Search && !account4Search && !customerName4Search) filterdata = bpNoSrc;
									if (!loanTrackingId && !bpNoSrc && nid4Search && !account4Search && !customerName4Search) filterdata = nid4Search;
									if (!loanTrackingId && !bpNoSrc && !nid4Search && account4Search && !customerName4Search) filterdata = account4Search;
									if (!loanTrackingId && !bpNoSrc && !nid4Search && !account4Search && customerName4Search) filterdata = customerName4Search;


									if (typeof record !== "undefined" && record != null && record != '') {
										var dashboardDetailsWin = getDashboardDetailsWindow('DASHBOARD DETAILS');
										dashboardDetailsWin.down('#deptName').setValue(deptName);
										dashboardDetailsWin.down('#record').setValue(record);
										dashboardDetailsWin.down('#cellClickIndecate').setValue(summaryClickIndecate);
										dashboardDetailsWin.down('#filterdata').setValue(filterdata);
										dashboardDetailsWin.show();
									} else return;
								} else {
									var loanTrackingId = cmp.lookupReference('loanTrackingId').value;
									var bpNoSrc = cmp.lookupReference('bpNoSrc').value;
									var nid4Search = cmp.lookupReference('nid4Search').value;
									var account4Search = cmp.lookupReference('account4Search').value;
									var customerName4Search = cmp.lookupReference('customerName4Search').value;
									var filterdata;
									if (loanTrackingId && !bpNoSrc && !nid4Search && !account4Search && !customerName4Search) filterdata = loanTrackingId;
									if (!loanTrackingId && bpNoSrc && !nid4Search && !account4Search && !customerName4Search) filterdata = bpNoSrc;
									if (!loanTrackingId && !bpNoSrc && nid4Search && !account4Search && !customerName4Search) filterdata = nid4Search;
									if (!loanTrackingId && !bpNoSrc && !nid4Search && account4Search && !customerName4Search) filterdata = account4Search;
									if (!loanTrackingId && !bpNoSrc && !nid4Search && !account4Search && customerName4Search) filterdata = customerName4Search;

									var recordLimit = target.firstElementChild.innerText;
									deptName = cmp.lookupReference('loanTrackerDepetWise').columns[target.cellIndex].text;

									if (recordLimit == 0 || deptName == '#' || deptName == 'Created On') return;
									else {
										var record = e.record;
										var deptName;
										var cellClickIndecate = "selectCell";

										var dashboardDetailsWin = getDashboardDetailsWindow('DASHBOARD DETAILS');
										dashboardDetailsWin.down('#deptName').setValue(deptName);
										dashboardDetailsWin.down('#record').setValue(record);
										dashboardDetailsWin.down('#cellClickIndecate').setValue(cellClickIndecate);
										dashboardDetailsWin.down('#record').setValue(record);
										dashboardDetailsWin.down('#filterdata').setValue(filterdata);
										dashboardDetailsWin.show();
									}
								}
							}
						}
					},
					plugins: [],
					columns: [{
							header: "#",
							sortable: false,
							xtype: 'rownumberer',
							width: 30,
							filter: {
								type: 'list'
							}
						},
						{
							xtype: 'gridcolumn',
							align: 'center',
							width: 100,
							dataIndex: 'date',
							sortable: true,
							text: 'Created On',
							filter: {
								type: 'string'
							},
							summaryType: 'count',
							summaryRenderer: function (value, summaryData, dataIndex) {
								return '<b>Total</b>';
							}
						},
						{
							xtype: 'gridcolumn',
							align: 'center',
							width: 100,
							dataIndex: 'fieldOfficerCount',
							sortable: true,
							text: 'Field',
							summaryType: 'sum',
							renderer: 'onGridDataRenderer',
							summaryRenderer: function (value, summaryData, dataIndex) {
								if (isNaN(value)) {
									return 0;
								} else {
									return Ext.String.format('<h7 style="background-color:#98FB98;cursor:pointer;">{0}</h7>', value);
								}
							}
						},
						{
							xtype: 'gridcolumn',
							align: 'center',
							width: 100,
							dataIndex: 'ppcCount',
							sortable: true,
							text: 'PPC',
							summaryType: 'sum',
							renderer: 'onGridDataRenderer',
							summaryRenderer: function (value, summaryData, dataIndex) {
								if (isNaN(value)) {
									return 0;
								} else {
									return Ext.String.format('<h7 style="background-color:#98FB98;cursor:pointer;">{0}</h7>', value);
								}
							}
						},
						{
							xtype: 'gridcolumn',
							align: 'center',
							width: 100,
							dataIndex: 'crmCount',
							sortable: true,
							text: 'CRM',
							summaryType: 'sum',
							renderer: 'onGridDataRenderer',
							summaryRenderer: function (value, summaryData, dataIndex) {
								if (isNaN(value)) {
									return 0;
								} else {
									return Ext.String.format('<h7 style="background-color:#98FB98;cursor:pointer;">{0}</h7>', value);
								}
							}
						},
						{
							xtype: 'gridcolumn',
							align: 'center',
							width: 100,
							dataIndex: 'cadCount',
							sortable: true,
							text: 'CAD',
							summaryType: 'sum',
							renderer: 'onGridDataRenderer',
							summaryRenderer: function (value, summaryData, dataIndex) {
								if (isNaN(value)) {
									return 0;
								} else {
									return Ext.String.format('<h7 style="background-color:#98FB98;cursor:pointer;">{0}</h7>', value);
								}
							}
						},
						{
							xtype: 'gridcolumn',
							align: 'center',
							width: 100,
							dataIndex: 'loanTrackerTotal',
							sortable: true,
							text: 'Total Loan',
							summaryType: 'sum',
							renderer: 'onGridDataRenderer',
							summaryRenderer: function (value, summaryData, dataIndex) {
								if (isNaN(value)) {
									return 0;
								} else {
									return Ext.String.format('<h7 style="background-color:#98FB98;cursor:pointer;">{0}</h7>', value);
								}
							}
						},
					]
				}],
			},
			{
				xtype: 'panel',
				title: 'Loan Count Date Wise',
				reference: 'loanCountDateWisePanel',
				itemId: 'loanCountDateWisePanel',
				id: 'loanCountDateWisePanel',
				tabConfig: {
					xtype: 'tab',
					id: 'loanCountDateWisePanelId',
					itemId: 'loanCountDateWisePanelId'
				},
				items: [{
					xtype: 'gridpanel',
					reference: 'loanCountDateWise',
					itemId: 'loanCountDateWise',
					columnWidth: 1.5,
					margin: '0 0 5 0',
					autoScroll: true,
					width: 1140,
					height: 540,
					layout: 'fit',
					header: false,
					border: true,
					title: false,
					filterable: true,
					closable: true,
					scrollable: true,
					border: false,
					store: 'gLoanCountDateWiseStore',
					viewConfig: {
						stripeRows: true,
						autoHeight: true,
						enableTextSelection: true,
						columnLines: true
					},

					features: [{
						id: 'group',
						ftype: 'summary',
						groupHeaderTpl: '{name}',
						hideGroupedHeader: true,
						enableGroupingMenu: false,
						showSummaryRow: true
					}],

					listeners: {
						//cellclick: 'onDeptCountGridCellClick'
					},
					plugins: [],

					dockedItems: [{
						xtype: 'toolbar',
						dock: 'top',
						itemId: 'loanCountDateWiseToolbar',
						height: 30,
						items: [{
							xtype: 'tbfill'
							},
							{
								xtype: 'datefield',
								fieldLabel: 'From',
								labelAlign: 'right',
								emptyText: 'From Date',
								format: 'd M Y',
								reference: 'loanCountDateWiseFormDateRef',
								margin: '2 2 2 2',
								border: 1,
								labelWidth: 40,
								width: 150
							},
							{
								xtype: 'datefield',
								fieldLabel: 'To',
								labelAlign: 'right',
								emptyText: 'To Date',
								format: 'd M Y',
								border: 1,
								reference: 'loanCountDateWiseToDateRef',
								margin: '2 2 2 2',
								labelWidth: 40,
								width: 150
							},
							{
								xtype: 'button',
								margin: '2 2 2 2',
								text: 'Search',
								listeners: {
									click: 'onClickLoanCountDateWiseSrc'
								}
							},
							{
								xtype: 'button',
								margin: '2 2 2 2',
								text: 'Clear',
								listeners: {
									click: 'onClickLoanCountDateWiseClear'
								}
							},
							'-',
							'-',
							{
								iconCls: 'icon-refresh', // optional icon class
								tooltip: 'Refresh',
								align: 'right',
								margin: '0 10 0 0',
								handler: 'refreshLoanCountDateWise'
							},
						]
					}],

					columns: [{
							header: "#",
							sortable: false,
							xtype: 'rownumberer',
							width: 30,
							filter: {
								type: 'list'
							}
						},
						{
							xtype: 'gridcolumn',
							align: 'center',
							width: 100,
							dataIndex: 'date',
							sortable: true,
							text: 'Date',
							filter: {
								type: 'string'
							},
							summaryType: 'count',
							summaryRenderer: function (value, summaryData, dataIndex) {
								return '<b>Total</b>';
							}
						},
						{
							xtype: 'gridcolumn',
							align: 'center',
							width: 100,
							dataIndex: 'entryELoan',
							sortable: true,
							text: 'Entry eLoan',
							summaryType: 'sum',
							renderer: 'onGridDataRenderer',
							summaryRenderer: function (value, summaryData, dataIndex) {
								if (isNaN(value)) {
									return 0;
								} else {
									return Ext.String.format('<b>{0}</b>', value);
								}
							}
						},
						{
							xtype: 'gridcolumn',
							align: 'center',
							width: 100,
							dataIndex: 'entryWeb',
							sortable: true,
							text: 'Entry LMS',
							summaryType: 'sum',
							renderer: 'onGridDataRenderer',
							summaryRenderer: function (value, summaryData, dataIndex) {
								if (isNaN(value)) {
									return 0;
								} else {
									return Ext.String.format('<b>{0}</b>', value);
								}
							}
						},
						{
							xtype: 'gridcolumn',
							align: 'center',
							width: 100,
							dataIndex: 'ppcReceived',
							sortable: true,
							text: 'PPC Received',
							summaryType: 'sum',
							renderer: 'onGridDataRenderer',
							summaryRenderer: function (value, summaryData, dataIndex) {
								if (isNaN(value)) {
									return 0;
								} else {
									return Ext.String.format('<b>{0}</b>', value);
								}
							}
						},
						{
							xtype: 'gridcolumn',
							align: 'center',
							width: 100,
							dataIndex: 'ppcRejcetPending',
							sortable: true,
							text: 'PPC Rejcet/Query',
							summaryType: 'sum',
							renderer: 'onGridDataRenderer',
							summaryRenderer: function (value, summaryData, dataIndex) {
								if (isNaN(value)) {
									return 0;
								} else {
									return Ext.String.format('<b>{0}</b>', value);
								}
							}
						},
						{
							xtype: 'gridcolumn',
							align: 'center',
							width: 100,
							dataIndex: 'ppcRecommend',
							sortable: true,
							text: 'PPC Recommend',
							summaryType: 'sum',
							renderer: 'onGridDataRenderer',
							summaryRenderer: function (value, summaryData, dataIndex) {
								if (isNaN(value)) {
									return 0;
								} else {
									return Ext.String.format('<b>{0}</b>', value);
								}
							}
						},

						{
							xtype: 'gridcolumn',
							align: 'center',
							width: 100,
							dataIndex: 'crmReceived',
							sortable: true,
							text: 'CRM Received',
							summaryType: 'sum',
							renderer: 'onGridDataRenderer',
							summaryRenderer: function (value, summaryData, dataIndex) {
								if (isNaN(value)) {
									return 0;
								} else {
									return Ext.String.format('<b>{0}</b>', value);
								}
							}
						}, {
							xtype: 'gridcolumn',
							align: 'center',
							width: 100,
							dataIndex: 'crmRejcetPending',
							sortable: true,
							text: 'CRM Rejcet/Query',
							summaryType: 'sum',
							renderer: 'onGridDataRenderer',
							summaryRenderer: function (value, summaryData, dataIndex) {
								if (isNaN(value)) {
									return 0;
								} else {
									return Ext.String.format('<b>{0}</b>', value);
								}
							}
						},
						{
							xtype: 'gridcolumn',
							align: 'center',
							width: 100,
							dataIndex: 'crmApproved',
							sortable: true,
							text: 'CRM Approved',
							summaryType: 'sum',
							renderer: 'onGridDataRenderer',
							summaryRenderer: function (value, summaryData, dataIndex) {
								if (isNaN(value)) {
									return 0;
								} else {
									return Ext.String.format('<b>{0}</b>', value);
								}
							}
						},
						{
							xtype: 'gridcolumn',
							align: 'center',
							width: 100,
							dataIndex: 'mdApproved',
							sortable: true,
							text: 'MD Approved',
							summaryType: 'sum',
							renderer: 'onGridDataRenderer',
							summaryRenderer: function (value, summaryData, dataIndex) {
								if (isNaN(value)) {
									return 0;
								} else {
									return Ext.String.format('<b>{0}</b>', value);
								}
							}
						},
						{
							xtype: 'gridcolumn',
							align: 'center',
							width: 100,
							dataIndex: 'cadSanction',
							sortable: true,
							text: 'CAD Sanction',
							summaryType: 'sum',
							renderer: 'onGridDataRenderer',
							summaryRenderer: function (value, summaryData, dataIndex) {
								if (isNaN(value)) {
									return 0;
								} else {
									return Ext.String.format('<b>{0}</b>', value);
								}
							}
						},
						{
							xtype: 'gridcolumn',
							align: 'center',
							width: 100,
							dataIndex: 'CAD Disbursed',
							sortable: true,
							text: 'cadDisbursed',
							summaryType: 'sum',
							renderer: 'onGridDataRenderer',
							summaryRenderer: function (value, summaryData, dataIndex) {
								if (isNaN(value)) {
									return 0;
								} else {
									return Ext.String.format('<b>{0}</b>', value);
								}
							}
						}
					]
				}],
			},
			{
				xtype: 'panel',
				title: 'Loan Status Dept Wise',
				reference: 'loanStatusDeptWisePanel',
				itemId: 'loanStatusDeptWisePanel',
				id: 'loanStatusDeptWisePanel',
				tabConfig: {
					xtype: 'tab',
					id: 'loanStatusDeptWisePanelId',
					itemId: 'loanStatusDeptWisePanelId'
				},
				items: [{
					xtype: 'gridpanel',
					reference: 'loanStatusDeptWise',
					itemId: 'loanStatusDeptWise',
					columnWidth: 1.5,
					margin: '0 0 5 0',
					autoScroll: true,
					width: 1150,
					height: 540,
					layout: 'fit',
					header: false,
					border: true,
					title: false,
					filterable: true,
					closable: true,
					scrollable: true,
					border: false,
					store: 'gLoanStatusDeptWiseStore',
					viewConfig: {
						stripeRows: true,
						autoHeight: true,
						enableTextSelection: true,
						columnLines: true
					},

					features: [{
						id: 'group',
						ftype: 'summary',
						groupHeaderTpl: '{name}',
						hideGroupedHeader: true,
						enableGroupingMenu: false,
						showSummaryRow: true
					}],
					listeners: {
						//cellclick: 'onDeptCountGridCellClick'
					},
					plugins: [],
					dockedItems: [{
						xtype: 'toolbar',
						dock: 'top',
						itemId: 'loanStatusDeptWiseToolbar',
						height: 30,
						items: [{
							xtype: 'tbfill'
							},
							{
								xtype: 'datefield',
								fieldLabel: 'From',
								labelAlign: 'right',
								emptyText: 'From Date',
								format: 'd M Y',
								reference: 'loanStatusDeptWiseFormDateRef',
								margin: '2 2 2 2',
								border: 1,
								labelWidth: 40,
								width: 150
							},
							{
								xtype: 'datefield',
								fieldLabel: 'To',
								labelAlign: 'right',
								emptyText: 'To Date',
								format: 'd M Y',
								border: 1,
								reference: 'loanStatusDeptWiseToDateRef',
								margin: '2 2 2 2',
								labelWidth: 40,
								width: 150
							},
							{
								xtype: 'button',
								margin: '2 2 2 2',
								text: 'Search',
								listeners: {
									click: 'onClickLoanStatusDeptWiseSrc'
								}
							},
							{
								xtype: 'button',
								margin: '2 2 2 2',
								text: 'Clear',
								listeners: {
									click: 'onClickLoanStatusDeptWiseClear'
								}
							},
							'-',
							'-',
							{
								iconCls: 'icon-refresh', // optional icon class
								tooltip: 'Refresh',
								align: 'right',
								margin: '0 10 0 0',
								handler: 'refreshLoanStatusDeptWise'
							},
						]
					}],
					columns: [{
							header: "#",
							sortable: false,
							xtype: 'rownumberer',
							width: 30,
							filter: {
								type: 'list'
							}
						},
						{
							xtype: 'gridcolumn',
							align: 'center',
							width: 100,
							dataIndex: 'date',
							sortable: true,
							text: 'Date',
							filter: {
								type: 'string'
							},
							summaryType: 'count',
							summaryRenderer: function (value, summaryData, dataIndex) {
								return '<b>Total</b>';
							}
						},
						{
							xtype: 'gridcolumn',
							align: 'center',
							width: 100,
							dataIndex: 'entryELoan',
							sortable: true,
							text: 'Entry eLoan',
							summaryType: 'sum',
							renderer: 'onGridDataRenderer',
							summaryRenderer: function (value, summaryData, dataIndex) {
								if (isNaN(value)) {
									return 0;
								} else {
									return Ext.String.format('<b>{0}</b>', value);
								}
							}
						},
						{
							xtype: 'gridcolumn',
							align: 'center',
							width: 100,
							dataIndex: 'entryWeb',
							sortable: true,
							text: 'Entry LMS',
							summaryType: 'sum',
							renderer: 'onGridDataRenderer',
							summaryRenderer: function (value, summaryData, dataIndex) {
								if (isNaN(value)) {
									return 0;
								} else {
									return Ext.String.format('<b>{0}</b>', value);
								}
							}
						},
						{
							xtype: 'gridcolumn',
							align: 'center',
							width: 100,
							dataIndex: 'ppcReceived',
							sortable: true,
							text: 'PPC Received',
							summaryType: 'sum',
							renderer: 'onGridDataRenderer',
							summaryRenderer: function (value, summaryData, dataIndex) {
								if (isNaN(value)) {
									return 0;
								} else {
									return Ext.String.format('<b>{0}</b>', value);
								}
							}
						},
						{
							xtype: 'gridcolumn',
							align: 'center',
							width: 100,
							dataIndex: 'ppcRejcetPending',
							sortable: true,
							text: 'PPC Rejcet/Query',
							summaryType: 'sum',
							renderer: 'onGridDataRenderer',
							summaryRenderer: function (value, summaryData, dataIndex) {
								if (isNaN(value)) {
									return 0;
								} else {
									return Ext.String.format('<b>{0}</b>', value);
								}
							}
						},
						{
							xtype: 'gridcolumn',
							align: 'center',
							width: 100,
							dataIndex: 'ppcRecommend',
							sortable: true,
							text: 'PPC Recommend',
							summaryType: 'sum',
							renderer: 'onGridDataRenderer',
							summaryRenderer: function (value, summaryData, dataIndex) {
								if (isNaN(value)) {
									return 0;
								} else {
									return Ext.String.format('<b>{0}</b>', value);
								}
							}
						},

						{
							xtype: 'gridcolumn',
							align: 'center',
							width: 100,
							dataIndex: 'crmReceived',
							sortable: true,
							text: 'CRM Received',
							summaryType: 'sum',
							renderer: 'onGridDataRenderer',
							summaryRenderer: function (value, summaryData, dataIndex) {
								if (isNaN(value)) {
									return 0;
								} else {
									return Ext.String.format('<b>{0}</b>', value);
								}
							}
						}, {
							xtype: 'gridcolumn',
							align: 'center',
							width: 100,
							dataIndex: 'crmRejcetPending',
							sortable: true,
							text: 'CRM Rejcet/Query',
							summaryType: 'sum',
							renderer: 'onGridDataRenderer',
							summaryRenderer: function (value, summaryData, dataIndex) {
								if (isNaN(value)) {
									return 0;
								} else {
									return Ext.String.format('<b>{0}</b>', value);
								}
							}
						},
						{
							xtype: 'gridcolumn',
							align: 'center',
							width: 100,
							dataIndex: 'crmApproved',
							sortable: true,
							text: 'CRM Approved',
							summaryType: 'sum',
							renderer: 'onGridDataRenderer',
							summaryRenderer: function (value, summaryData, dataIndex) {
								if (isNaN(value)) {
									return 0;
								} else {
									return Ext.String.format('<b>{0}</b>', value);
								}
							}
						},
						{
							xtype: 'gridcolumn',
							align: 'center',
							width: 100,
							dataIndex: 'mdApproved',
							sortable: true,
							text: 'MD Approved',
							summaryType: 'sum',
							renderer: 'onGridDataRenderer',
							summaryRenderer: function (value, summaryData, dataIndex) {
								if (isNaN(value)) {
									return 0;
								} else {
									return Ext.String.format('<b>{0}</b>', value);
								}
							}
						},
						{
							xtype: 'gridcolumn',
							align: 'center',
							width: 100,
							dataIndex: 'cadSanction',
							sortable: true,
							text: 'CAD Sanction',
							summaryType: 'sum',
							renderer: 'onGridDataRenderer',
							summaryRenderer: function (value, summaryData, dataIndex) {
								if (isNaN(value)) {
									return 0;
								} else {
									return Ext.String.format('<b>{0}</b>', value);
								}
							}
						},
						{
							xtype: 'gridcolumn',
							align: 'center',
							width: 100,
							dataIndex: 'cadDisbursed',
							sortable: true,
							text: 'CAD Disbursed',
							summaryType: 'sum',
							renderer: 'onGridDataRenderer',
							summaryRenderer: function (value, summaryData, dataIndex) {
								if (isNaN(value)) {
									return 0;
								} else {
									return Ext.String.format('<b>{0}</b>', value);
								}
							}
						}
					],
				}]
			},
			{
				xtype: 'panel',
				title: 'Depart Wise Loan Count',
				reference: 'departmentWiseLoanCountPanel',
				itemId: 'departmentWiseLoanCountPanel',
				id: 'departmentWiseLoanCountPanel',
				tabConfig: {
					xtype: 'tab',
					id: 'departmentWiseLoanCountPanelId',
					itemId: 'departmentWiseLoanCountPanelId'
				},
				items: [{
					xtype: 'gridpanel',
					reference: 'departmentWiseLoanCountGrid',
					itemId: 'departmentWiseLoanCountGrid',
					columnWidth: 1.5,
					margin: '0 0 5 0',
					autoScroll: true,
					width: 1150,
					height: 540,
					layout: 'fit',
					header: false,
					border: true,
					title: false,
					filterable: true,
					closable: true,
					scrollable: true,
					border: false,
					store: 'gDepartmentWiseLoanCount',
					viewConfig: {
						stripeRows: true,
						autoHeight: true,
						enableTextSelection: true,
						columnLines: true
					},

					listeners: {
						cellclick: 'onDeptCountGridCellClick'
					},

					features: [{
						id: 'group',
						ftype: 'summary',
						groupHeaderTpl: '{name}',
						hideGroupedHeader: true,
						enableGroupingMenu: false,
						showSummaryRow: true
					}],

					plugins: [],

					dockedItems: [{
						xtype: 'toolbar',
						dock: 'top',
						itemId: 'departmentWiseLoanCountToolbar',
						height: 30,
						items: [{
							xtype: 'tbfill'
							},
							{
								xtype: 'combobox',
								itemId: 'customerName',
								reference: 'customerName',
								fieldLabel: 'Customer Name',
								labelAlign: 'right',
								width: 300,
								labelWidth: 100,
								margin: '2 2 2 2',
								mode: 'local',
								displayField: 'customerName',
								valueField: 'customerName',
								queryMode: 'local',
								store: 'gCustomerStore'
							},
							{
								xtype: 'datefield',
								fieldLabel: 'From',
								labelAlign: 'right',
								emptyText: 'From Date',
								format: 'd M Y',
								reference: 'departmentFormDateRef',
								margin: '2 2 2 2',
								border: 1,
								labelWidth: 40,
								width: 150
							},
							{
								xtype: 'datefield',
								fieldLabel: 'To',
								labelAlign: 'right',
								emptyText: 'To Date',
								format: 'd M Y',
								border: 1,
								reference: 'departmentToDateRef',
								margin: '2 2 2 2',
								labelWidth: 40,
								width: 150
							},
							{
								xtype: 'button',
								margin: '2 2 2 2',
								text: 'Search',
								listeners: {
									click: 'onClickDeptCountSrc'
								}
							},
							{
								xtype: 'button',
								margin: '2 2 2 2',
								text: 'Clear',
								listeners: {
									click: 'onClickDeptCountClear'
								}
							},
							'-',
							'-',
							{
								iconCls: 'icon-refresh', // optional icon class
								tooltip: 'Refresh',
								align: 'right',
								margin: '0 10 0 0',
								handler: 'refreshLoanDepartmentWise'
							}
						]
					}],

					columns: []
				}],
			},
			{
				xtype: 'panel',
				title: 'On Process In CRM',
				reference: 'userWiseOnProcessPanel',
				itemId: 'userWiseOnProcessPanel',
				id: 'userWiseOnProcessPanel',
				tabConfig: {
					xtype: 'tab',
					id: 'userWiseOnProcessPanelId',
					itemId: 'userWiseOnProcessPanelId'
				},
				items: [{
					xtype: 'gridpanel',
					reference: 'userWiseOnProcessGrid',
					columnWidth: 1,
					margin: '0 0 5 0',
					autoScroll: true,
					width: 1150,
					height: 540,
					layout: 'fit',
					header: false,
					border: true,
					title: false,
					filterable: true,
					closable: true,
					border: false,
					store: 'gUserWiseOnProcess',
					viewConfig: {
						stripeRows: true,
						autoHeight: true,
						enableTextSelection: true,
						columnLines: true
					},

					features: [{
						id: 'group',
						ftype: 'summary',
						groupHeaderTpl: '{name}',
						hideGroupedHeader: true,
						enableGroupingMenu: false,
						showSummaryRow: true
					}],

					plugins: [],

					dockedItems: [{
						xtype: 'toolbar',
						dock: 'top',
						itemId: 'onProcessToolbar',
						height: 30,
						items: [{
							xtype: 'tbfill'
							},
							{
								xtype: 'datefield',
								fieldLabel: 'From',
								labelAlign: 'right',
								emptyText: 'From Date',
								format: 'd M Y',
								reference: 'onProcessFormDateRef',
								margin: '2 2 2 2',
								border: 1,
								labelWidth: 40,
								width: 150
							},
							{
								xtype: 'datefield',
								fieldLabel: 'To',
								labelAlign: 'right',
								emptyText: 'To Date',
								format: 'd M Y',
								border: 1,
								reference: 'onProcessToDateRef',
								margin: '2 2 2 2',
								labelWidth: 40,
								width: 150
							},
							{
								xtype: 'button',
								margin: '2 2 2 2',
								text: 'Search',
								listeners: {
									click: 'onClickOnProcessCountSrc'
								}
							},
							{
								xtype: 'button',
								margin: '2 2 2 2',
								text: 'Clear',
								listeners: {
									click: 'onClickOnProcessCountClear'
								}
							},
							'-',
							'-',
							{
								iconCls: 'icon-refresh', // optional icon class
								tooltip: 'Refresh',
								align: 'right',
								margin: '0 10 0 0',
								handler: 'refreshLoanProcessWise'
							}
						]
					}],

					columns: []
				}]
			},
			{
				xtype: 'panel',
				title: 'File Received In CRM',
				reference: 'userWiseFileReceivedPanel',
				itemId: 'userWiseFileReceivedPanel',
				id: 'userWiseFileReceivedPanel',
				tabConfig: {
					xtype: 'tab',
					id: 'userWiseFileReceivedPanelId',
					itemId: 'userWiseFileReceivedPanelId'
				},
				items: [{
					xtype: 'gridpanel',
					reference: 'userWiseFileReceivedGrid',
					columnWidth: 1,
					margin: '0 0 5 0',
					header: false,
					border: true,
					title: false,
					autoScroll: true,
					width: 1150,
					height: 538,
					layout: 'fit',
					filterable: true,
					closable: true,
					border: false,
					store: 'gUserWiseFileReceived',
					viewConfig: {
						stripeRows: true,
						autoHeight: true,
						enableTextSelection: true,
						columnLines: true
					},

					features: [{
						id: 'group',
						ftype: 'summary',
						groupHeaderTpl: '{name}',
						hideGroupedHeader: true,
						enableGroupingMenu: false,
						showSummaryRow: true
					}],

					plugins: [],

					dockedItems: [{
						xtype: 'toolbar',
						dock: 'top',
						itemId: 'userWiseFileReceivedToolbar',
						height: 30,
						items: [{
							xtype: 'tbfill'
							},
							{
								xtype: 'datefield',
								fieldLabel: 'From',
								labelAlign: 'right',
								emptyText: 'From Date',
								format: 'd M Y',
								reference: 'fileReceivedFormDateRef',
								margin: '2 2 2 2',
								border: 1,
								labelWidth: 40,
								width: 150
							},
							{
								xtype: 'datefield',
								fieldLabel: 'To',
								labelAlign: 'right',
								emptyText: 'To Date',
								format: 'd M Y',
								border: 1,
								reference: 'fileReceivedToDateRef',
								margin: '2 2 2 2',
								labelWidth: 40,
								width: 150
							},
							{
								xtype: 'button',
								margin: '2 2 2 2',
								text: 'Search',
								listeners: {
									click: 'onClickFileReceivedCountSrc'
								}
							},
							{
								xtype: 'button',
								margin: '2 2 2 2',
								text: 'Clear',
								listeners: {
									click: 'onClickFileReceivedCountClear'
								}
							},
							'-',
							'-',
							{
								iconCls: 'icon-refresh', // optional icon class
								tooltip: 'Refresh',
								align: 'right',
								margin: '0 10 0 0',
								handler: 'refreshLoanFileReceive'
							}
						]
					}],

					columns: []
				}]
			},
			{
				xtype: 'panel',
				title: 'Status Wise Loan Count',
				reference: 'statusWiseLoanCount',
				itemId: 'statusWiseLoanCount',
				id: 'statusWiseLoanCount',
				tabConfig: {
					xtype: 'tab',
					id: 'statusWiseLoanCountId',
					itemId: 'statusWiseLoanCountId'
				},
				items: [{
					xtype: 'gridpanel',
					reference: 'statusWiseLoanCountGrid',
					columnWidth: 1.5,
					margin: '0 0 5 0',
					autoScroll: true,
					width: 1150,
					height: 545,
					layout: 'fit',
					header: false,
					border: true,
					title: false,
					layout: 'fit',
					filterable: true,
					closable: true,
					scrollable: true,
					border: false,
					store: 'gStatusWiseLoanCount',
					viewConfig: {
						stripeRows: true,
						autoHeight: true,
						enableTextSelection: true,
						columnLines: true
					},

					features: [{
						id: 'group',
						ftype: 'summary',
						groupHeaderTpl: '{name}',
						hideGroupedHeader: true,
						enableGroupingMenu: false,
						showSummaryRow: true
					}],

					plugins: [],

					dockedItems: [{
						xtype: 'toolbar',
						dock: 'top',
						itemId: 'statusWiseLoanCountToolbar',
						height: 30,
						items: [{
							xtype: 'tbfill'
							},
							{
								xtype: 'datefield',
								fieldLabel: 'From',
								labelAlign: 'right',
								emptyText: 'From Date',
								format: 'd M Y',
								reference: 'statusFormDateRef',
								margin: '2 2 2 2',
								flex: 1,
								border: 1,
							},
							{
								xtype: 'datefield',
								fieldLabel: 'To',
								labelAlign: 'right',
								emptyText: 'To Date',
								margin: '2 2 2 2',
								format: 'd M Y',
								border: 1,
								reference: 'statusToDateRef',
								flex: 1,
							},
							{
								xtype: 'button',
								labelAlign: 'right',
								margin: '2 2 2 2',
								text: 'Search',
								listeners: {
									click: 'onClickStatusCountSrc'
								}
							},
							{
								xtype: 'button',
								labelAlign: 'right',
								margin: '2 2 2 2',
								text: 'Clear',
								listeners: {
									click: 'onClickStatusCountClear'
								}
							},
							'-',
							'-',
							{
								iconCls: 'icon-refresh', // optional icon class
								tooltip: 'Refresh',
								align: 'right',
								margin: '0 10 0 0',
								handler: 'refreshLoanStatusWise'
							}
						]
					}],

					columns: [{
							header: "#",
							sortable: false,
							xtype: 'rownumberer',
							width: 30,
							filter: {
								type: 'list'
							}
						},
						{
							xtype: 'gridcolumn',
							align: 'center',
							width: 100,
							dataIndex: 'date',
							sortable: true,
							text: 'Date',
							filter: {
								type: 'string'
							},
							summaryType: 'count',
							summaryRenderer: function (value, summaryData, dataIndex) {
								return '<b>Total</b>';
							}
						},
						{
							xtype: 'gridcolumn',
							align: 'center',
							width: 100,
							dataIndex: 'newEntry',
							sortable: true,
							text: 'New Entry',
							summaryType: 'sum',
							renderer: 'onGridDataRenderer',
							summaryRenderer: function (value, summaryData, dataIndex) {
								if (isNaN(value)) {
									return 0;
								} else {
									return Ext.String.format('<b>{0}</b>', value);
								}
							}
						},
						{
							xtype: 'gridcolumn',
							align: 'center',
							width: 100,
							dataIndex: 'pendingRecomPpc',
							sortable: true,
							text: 'Pending Recom(PPC)',
							summaryType: 'sum',
							renderer: 'onGridDataRenderer',
							summaryRenderer: function (value, summaryData, dataIndex) {
								if (isNaN(value)) {
									return 0;
								} else {
									return Ext.String.format('<b>{0}</b>', value);
								}
							}
						},
						{
							xtype: 'gridcolumn',
							align: 'center',
							width: 100,
							dataIndex: 'recomByPpc',
							sortable: true,
							text: 'Recom. By PPC',
							summaryType: 'sum',
							renderer: 'onGridDataRenderer',
							summaryRenderer: function (value, summaryData, dataIndex) {
								if (isNaN(value)) {
									return 0;
								} else {
									return Ext.String.format('<b>{0}</b>', value);
								}
							}
						},
						{
							xtype: 'gridcolumn',
							align: 'center',
							width: 100,
							dataIndex: 'receivebyCrm',
							sortable: true,
							text: 'Receive by CRM',
							summaryType: 'sum',
							renderer: 'onGridDataRenderer',
							summaryRenderer: function (value, summaryData, dataIndex) {
								if (isNaN(value)) {
									return 0;
								} else {
									return Ext.String.format('<b>{0}</b>', value);
								}
							}
						},
						{
							xtype: 'gridcolumn',
							align: 'center',
							width: 100,
							dataIndex: 'complete',
							sortable: true,
							text: 'Complete',
							summaryType: 'sum',
							renderer: 'onGridDataRenderer',
							summaryRenderer: function (value, summaryData, dataIndex) {
								if (isNaN(value)) {
									return 0;
								} else {
									return Ext.String.format('<b>{0}</b>', value);
								}
							}
						},
						{
							xtype: 'gridcolumn',
							align: 'center',
							width: 100,
							dataIndex: 'conApproved',
							sortable: true,
							text: 'Con. Approved',
							summaryType: 'sum',
							renderer: 'onGridDataRenderer',
							summaryRenderer: function (value, summaryData, dataIndex) {
								if (isNaN(value)) {
									return 0;
								} else {
									return Ext.String.format('<b>{0}</b>', value);
								}
							}
						},
						{
							xtype: 'gridcolumn',
							align: 'center',
							width: 100,
							dataIndex: 'onProcess',
							sortable: true,
							text: 'On Process',
							summaryType: 'sum',
							renderer: 'onGridDataRenderer',
							summaryRenderer: function (value, summaryData, dataIndex) {
								if (isNaN(value)) {
									return 0;
								} else {
									return Ext.String.format('<b>{0}</b>', value);
								}
							}
						},
						{
							xtype: 'gridcolumn',
							align: 'center',
							width: 100,
							dataIndex: 'pending',
							sortable: true,
							text: 'Pending',
							summaryType: 'sum',
							renderer: 'onGridDataRenderer',
							summaryRenderer: function (value, summaryData, dataIndex) {
								if (isNaN(value)) {
									return 0;
								} else {
									return Ext.String.format('<b>{0}</b>', value);
								}
							}
						},
						{
							xtype: 'gridcolumn',
							align: 'center',
							width: 150,
							dataIndex: 'slGenerated',
							sortable: true,
							text: 'Sanction Letter Generated',
							summaryType: 'sum',
							renderer: 'onGridDataRenderer',
							summaryRenderer: function (value, summaryData, dataIndex) {
								if (isNaN(value)) {
									return 0;
								} else {
									return Ext.String.format('<b>{0}</b>', value);
								}
							}
						}
					]
				}],
			}
		]
	}],
	listeners: {
		afterrender: 'loadExecutiveDashboardAllData',
		//beforerender : 'onBeforeLoadLoanPanel'
	}
});